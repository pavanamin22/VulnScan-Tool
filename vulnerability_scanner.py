import socket
import tkinter as tk
from tkinter import messagebox, scrolledtext

class VulnerabilityScanner:
    def __init__(self, root):
        self.root = root
        self.root.title("Simple Vulnerability Scanner")
        self.root.geometry("500x400")
        self.root.configure(bg="#f0f0f0")

        # Title Label
        title_label = tk.Label(root, text="Vulnerability Scanner", font=("Arial", 20, "bold"), fg="#2c3e50", bg="#f0f0f0")
        title_label.pack(pady=20)

        # Input Frame
        input_frame = tk.Frame(root, bg="#f0f0f0")
        input_frame.pack(pady=10)

        tk.Label(input_frame, text="Target IP or Domain:", font=("Arial", 12), fg="#e74c3c", bg="#f0f0f0").grid(row=0, column=0, padx=5, pady=5)
        self.ip_domain_entry = tk.Entry(input_frame, font=("Arial", 12), width=20)
        self.ip_domain_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(input_frame, text="Port Range (e.g., 1-100):", font=("Arial", 12), fg="#e74c3c", bg="#f0f0f0").grid(row=1, column=0, padx=5, pady=5)
        self.port_range_entry = tk.Entry(input_frame, font=("Arial", 12), width=20)
        self.port_range_entry.grid(row=1, column=1, padx=5, pady=5)

        # Scan Button
        scan_button = tk.Button(root, text="Scan", font=("Arial", 12, "bold"), fg="white", bg="#3498db", command=self.scan_vulnerabilities)
        scan_button.pack(pady=20)

        # Result Text Area
        self.result_text = scrolledtext.ScrolledText(root, font=("Arial", 10), height=10, width=50, bg="#ffffff", fg="#34495e")
        self.result_text.pack(pady=10)

    def scan_vulnerabilities(self):
        self.result_text.delete(1.0, tk.END)
        target = self.ip_domain_entry.get()
        port_range = self.port_range_entry.get()

        if not target or not port_range:
            messagebox.showerror("Error", "Please enter both target and port range!")
            return

        try:
            # Resolve domain to IP if it's a domain name
            try:
                target_ip = socket.gethostbyname(target)
                self.result_text.insert(tk.END, f"Resolved {target} to IP: {target_ip}\n\n")
            except socket.gaierror:
                target_ip = target  # Use as IP if resolution fails

            start_port, end_port = map(int, port_range.split('-'))
            self.result_text.insert(tk.END, f"Scanning {target_ip} (Ports {start_port}-{end_port})...\n\n")
            open_ports = self.scan_ports(target_ip, start_port, end_port)
            if open_ports:
                self.result_text.insert(tk.END, "Open Ports and Potential Vulnerabilities:\n")
                for port in open_ports:
                    self.result_text.insert(tk.END, f"Port {port} is open (May indicate vulnerability, further analysis recommended)\n")
            else:
                self.result_text.insert(tk.END, "No open ports detected. System may be secure or requires deeper scan.\n")
        except ValueError:
            messagebox.showerror("Error", "Invalid port range format! Use 'start-end' (e.g., 1-100).")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")

    def scan_ports(self, ip, start_port, end_port):
        open_ports = []
        for port in range(start_port, end_port + 1):
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((ip, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        return open_ports

if __name__ == "__main__":
    root = tk.Tk()
    app = VulnerabilityScanner(root)
    root.mainloop()